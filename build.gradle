apply plugin: 'java'
apply plugin: 'idea'

repositories {
    mavenCentral()
}

configurations {
    sbe
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-api:2.17.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.0'
    implementation 'org.apache.logging.log4j:log4j-iostreams:2.17.0'
    implementation 'org.agrona:agrona:1.6.0'
    implementation 'uk.co.real-logic:sbe-tool:1.19.0'

    testImplementation(platform('org.junit:junit-bom:5.7.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation 'org.assertj:assertj-core:3.19.0'

    sbe 'org.agrona:agrona:1.6.0'
    sbe 'uk.co.real-logic:sbe-tool:1.19.0'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

def testProtocolDir = 'src/generateprotocol/java'

task generateProtocols(type: JavaExec) {
    def inputFiles = [
            'src/test/resources/sample-schema.xml',
            'src/test/resources/sub-protocol-schema.xml',
    ]
    def outputDir = testProtocolDir
    mainClass.set('uk.co.real_logic.sbe.SbeTool')
    classpath = configurations.sbe
    systemProperties(
            'sbe.output.dir': outputDir,
            'sbe.java.generate.interfaces': 'true',
            'sbe.target.language': 'Java',
            'sbe.validation.xsd': 'src/test/resources/sbe.xsd',
            'sbe.validation.warnings.fatal': 'true',
            'sbe.validation.stop.on.error': 'true',
            'sbe.decode.unknown.enum.values': 'true')
    args = inputFiles

    inputs.files inputFiles
    outputs.dir outputDir

    doLast {
        println 'Regenerated wireshark test protocols'
    }
}

sourceSets.test.java.srcDirs += [testProtocolDir]

compileTestJava.dependsOn 'generateProtocols'

tasks.withType(JavaCompile) {
    options.warnings = false
}

task generateCustomProtocols(type: JavaExec) {
    def inputFiles = [
            "aeron/aeron-archive/src/main/resources/archive/aeron-archive-codecs.xml",
            "aeron/aeron-cluster/src/main/resources/cluster/aeron-cluster-codecs.xml",
            "../../adaptive/aeron-io-samples/cluster-protocol/src/main/resources/protocol/protocol-codecs.xml"
    ]
    def outputDir = "${buildDir}/generated-sources/aeron-cluster"
    mainClass.set('com.transficc.wiresharktools.generator.SbeLuaGenerator')
    classpath = sourceSets.main.runtimeClasspath
    systemProperties(
            'protocol.name': 'mushroom',
            'envelope.message.names': 'SessionMessageHeader'
    )
    args = inputFiles

    inputs.files inputFiles
    outputs.dir outputDir

    doLast {
        println 'Regenerated wireshark Aeron Cluster protocols'
    }
}
